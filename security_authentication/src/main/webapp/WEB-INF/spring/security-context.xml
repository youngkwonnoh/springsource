<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<bean id="customLoginSuccessHandler" class="com.spring.handler.CustomLoginSuccessHandler" />
	<bean id="customAccessDeniedHandler" class="com.spring.handler.CustomAccessDeniedHandler" />
	
	<security:http>
		<!-- login-page="/login" : 개발자가 만든 로그인 페이지를 띄우기 위해 필요(필터 -> 컨트롤러)
			authentication-failure-url="/login-error" : 로그인 실패 시 login?error 가는걸 개발자가 원하는 주소로 유지하는데 필요 
			authentication-success-handler-ref="customLoginSuccessHandler" : 로그인 성공 시 (인증 성공) 진행되는 단계에 대한 처리(필터 -> 핸들러 -> 컨트롤러) 
		-->
	
		<security:form-login login-page="/login" authentication-failure-url="/login-error"
			authentication-success-handler-ref="customLoginSuccessHandler"/>
		
		<!-- logout-success-url="/" : login?logout 형태로 가는 구조 변경 -->
		<security:logout logout-success-url="/" invalidate-session="true" delete-cookies="JSESSIONID"/>
		
		<!-- 사용자의 요청을 가로채서 권한 여부 확인 : 컨트롤러 위에 @PreAuthorize로 대체 -->
		<!-- <security:intercept-url pattern="/teacher" access="hasRole('ROLE_TEACHER')"/>
		 <security:intercept-url pattern="/student" access="hasRole('ROLE_STUDENT')"/> -->
		
		<!-- 접근 제한 시 처리는 handler에게 맡김 : 필터 -> 핸들러 -> 컨트롤러 -->
		<security:access-denied-handler ref="customAccessDeniedHandler"/>
	</security:http>
	
	<bean id="studentManager" class="com.spring.student.StudentManager"/>
	<bean id="teacherManager" class="com.spring.teacher.TeacherManager"/>
	
	<security:authentication-manager>
		<security:authentication-provider ref="studentManager"/>
		<security:authentication-provider ref="teacherManager"/>
	</security:authentication-manager>

</beans>
